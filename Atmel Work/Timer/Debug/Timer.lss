
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000312  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  00000386  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b5e  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074c  00000000  00000000  00001072  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067f  00000000  00000000  000017be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00001e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000474  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000050a  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000029e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  74:	0c 94 87 01 	jmp	0x30e	; 0x30e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPinDir>:
		}
}

void DIO_SetPinDir(uint8 Port , uint8 Pin , uint8 Dir)
{
	switch(Dir)
  7c:	44 23       	and	r20, r20
  7e:	b9 f1       	breq	.+110    	; 0xee <DIO_SetPinDir+0x72>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	09 f0       	breq	.+2      	; 0x86 <DIO_SetPinDir+0xa>
  84:	6b c0       	rjmp	.+214    	; 0x15c <DIO_SetPinDir+0xe0>
	{
		case DIO_PIN_OUTPUT :
		  switch(Port)
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	89 f0       	breq	.+34     	; 0xac <DIO_SetPinDir+0x30>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_SetPinDir+0x1a>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_SetPinDir+0x46>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_SetPinDir+0x5c>
  94:	08 95       	ret
		  {
			  case DIO_PORTA :
			  SET_BIT(DDRA , Pin);
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SetPinDir+0x26>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SetPinDir+0x22>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
			  break;
  aa:	08 95       	ret
			  case DIO_PORTB :
			  SET_BIT(DDRB , Pin);
  ac:	27 b3       	in	r18, 0x17	; 23
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPinDir+0x3c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPinDir+0x38>
  bc:	82 2b       	or	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
			  break;
  c0:	08 95       	ret
			  case DIO_PORTC :
			  SET_BIT(DDRC , Pin);
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPinDir+0x52>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPinDir+0x4e>
  d2:	82 2b       	or	r24, r18
  d4:	84 bb       	out	0x14, r24	; 20
			  break;
  d6:	08 95       	ret
			  case DIO_PORTD :
			  SET_BIT(DDRD , Pin);
  d8:	21 b3       	in	r18, 0x11	; 17
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPinDir+0x68>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPinDir+0x64>
  e8:	82 2b       	or	r24, r18
  ea:	81 bb       	out	0x11, r24	; 17
			  break;
  ec:	08 95       	ret
		  
		break;
		
		case DIO_PIN_INPUT :
		
			switch(Port)
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 f0       	breq	.+36     	; 0x116 <DIO_SetPinDir+0x9a>
  f2:	28 f0       	brcs	.+10     	; 0xfe <DIO_SetPinDir+0x82>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	d9 f0       	breq	.+54     	; 0x12e <DIO_SetPinDir+0xb2>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	29 f1       	breq	.+74     	; 0x146 <DIO_SetPinDir+0xca>
  fc:	08 95       	ret
			{
				case DIO_PORTA :
				CLR_BIT(DDRA , Pin);
  fe:	2a b3       	in	r18, 0x1a	; 26
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPinDir+0x8e>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPinDir+0x8a>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
				break;
 114:	08 95       	ret
				case DIO_PORTB :
				CLR_BIT(DDRB , Pin);
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPinDir+0xa6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPinDir+0xa2>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	87 bb       	out	0x17, r24	; 23
				break;
 12c:	08 95       	ret
				case DIO_PORTC :
				CLR_BIT(DDRC , Pin);
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPinDir+0xbe>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPinDir+0xba>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	84 bb       	out	0x14, r24	; 20
				break;
 144:	08 95       	ret
				case DIO_PORTD :
				CLR_BIT(DDRD , Pin);
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_SetPinDir+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_SetPinDir+0xd2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <LED0_Init>:
{
	CLR_BIT(PORTC,7);
}
void LED2_OFF(void)
{
	CLR_BIT(PORTD,3);
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	62 e0       	ldi	r22, 0x02	; 2
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDir>
 168:	08 95       	ret

0000016a <LED0_Toggle>:
}

void LED0_Toggle(void)
{
	Toggle_BIT(PORTC,2);
 16a:	95 b3       	in	r25, 0x15	; 21
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	89 27       	eor	r24, r25
 170:	85 bb       	out	0x15, r24	; 21
 172:	08 95       	ret

00000174 <main>:


int main(void)
{
    
	LED0_Init();
 174:	0e 94 af 00 	call	0x15e	; 0x15e <LED0_Init>
	
	Timer0_Init();
 178:	0e 94 05 01 	call	0x20a	; 0x20a <Timer0_Init>
	Timer0_SetDelay(1000);
 17c:	68 ee       	ldi	r22, 0xE8	; 232
 17e:	73 e0       	ldi	r23, 0x03	; 3
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 12 01 	call	0x224	; 0x224 <Timer0_SetDelay>
	Timer0_Start();
 188:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Timer0_Start>
 18c:	ff cf       	rjmp	.-2      	; 0x18c <main+0x18>

0000018e <__vector_11>:
}



ISR(TIMER0_OVF_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
    static uint8 cnt = 0;
	
	cnt++;
 1b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	if(cnt == Number_OverFlows)
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	a0 e0       	ldi	r26, 0x00	; 0
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <Number_OverFlows>
 1c4:	50 91 62 00 	lds	r21, 0x0062	; 0x800062 <Number_OverFlows+0x1>
 1c8:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <Number_OverFlows+0x2>
 1cc:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <Number_OverFlows+0x3>
 1d0:	84 17       	cp	r24, r20
 1d2:	95 07       	cpc	r25, r21
 1d4:	a6 07       	cpc	r26, r22
 1d6:	b7 07       	cpc	r27, r23
 1d8:	39 f4       	brne	.+14     	; 0x1e8 <__vector_11+0x5a>
	{
		LED0_Toggle();
 1da:	0e 94 b5 00 	call	0x16a	; 0x16a <LED0_Toggle>
		cnt = 0;
 1de:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		TCNT0 = CounterRegisterInit_Value ;
 1e2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <CounterRegisterInit_Value>
 1e6:	82 bf       	out	0x32, r24	; 50
		
	}

	
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	bf 91       	pop	r27
 1ee:	af 91       	pop	r26
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	7f 91       	pop	r23
 1f6:	6f 91       	pop	r22
 1f8:	5f 91       	pop	r21
 1fa:	4f 91       	pop	r20
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <Timer0_Init>:


void Timer0_Init(void)
{
	/* Select Normal Mode*/ 
	CLR_BIT(TCCR0,3);
 20a:	83 b7       	in	r24, 0x33	; 51
 20c:	87 7f       	andi	r24, 0xF7	; 247
 20e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,6);
 210:	83 b7       	in	r24, 0x33	; 51
 212:	8f 7b       	andi	r24, 0xBF	; 191
 214:	83 bf       	out	0x33, r24	; 51
	
	/* Enable Interrupt*/
	SET_BIT(SREG,7);
 216:	8f b7       	in	r24, 0x3f	; 63
 218:	80 68       	ori	r24, 0x80	; 128
 21a:	8f bf       	out	0x3f, r24	; 63
	SET_BIT(TIMSK,0);
 21c:	89 b7       	in	r24, 0x39	; 57
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	89 bf       	out	0x39, r24	; 57
 222:	08 95       	ret

00000224 <Timer0_SetDelay>:
	
}

void Timer0_SetDelay(uint32 Delay_ms)
{
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	9b 01       	movw	r18, r22
 22a:	ac 01       	movw	r20, r24
	
	uint8 Tick_Time = (64 / 16);
	
	uint32 Total_TicksNumbers = (Delay_ms * 1000)   /   Tick_Time ;
 22c:	a8 ee       	ldi	r26, 0xE8	; 232
 22e:	b3 e0       	ldi	r27, 0x03	; 3
 230:	0e 94 6d 01 	call	0x2da	; 0x2da <__muluhisi3>
	
	Number_OverFlows = Total_TicksNumbers / 256 ;
 234:	8b 01       	movw	r16, r22
 236:	9c 01       	movw	r18, r24
 238:	0f 2e       	mov	r0, r31
 23a:	fa e0       	ldi	r31, 0x0A	; 10
 23c:	36 95       	lsr	r19
 23e:	27 95       	ror	r18
 240:	17 95       	ror	r17
 242:	07 95       	ror	r16
 244:	fa 95       	dec	r31
 246:	d1 f7       	brne	.-12     	; 0x23c <Timer0_SetDelay+0x18>
 248:	f0 2d       	mov	r31, r0
 24a:	00 93 61 00 	sts	0x0061, r16	; 0x800061 <Number_OverFlows>
 24e:	10 93 62 00 	sts	0x0062, r17	; 0x800062 <Number_OverFlows+0x1>
 252:	20 93 63 00 	sts	0x0063, r18	; 0x800063 <Number_OverFlows+0x2>
 256:	30 93 64 00 	sts	0x0064, r19	; 0x800064 <Number_OverFlows+0x3>
	
	CounterRegisterInit_Value = 256 - (Total_TicksNumbers % 256);
 25a:	dc 01       	movw	r26, r24
 25c:	cb 01       	movw	r24, r22
 25e:	b6 95       	lsr	r27
 260:	a7 95       	ror	r26
 262:	97 95       	ror	r25
 264:	87 95       	ror	r24
 266:	b6 95       	lsr	r27
 268:	a7 95       	ror	r26
 26a:	97 95       	ror	r25
 26c:	87 95       	ror	r24
 26e:	99 27       	eor	r25, r25
 270:	aa 27       	eor	r26, r26
 272:	bb 27       	eor	r27, r27
 274:	00 e0       	ldi	r16, 0x00	; 0
 276:	11 e0       	ldi	r17, 0x01	; 1
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	b9 01       	movw	r22, r18
 27e:	a8 01       	movw	r20, r16
 280:	48 1b       	sub	r20, r24
 282:	59 0b       	sbc	r21, r25
 284:	6a 0b       	sbc	r22, r26
 286:	7b 0b       	sbc	r23, r27
 288:	40 93 65 00 	sts	0x0065, r20	; 0x800065 <CounterRegisterInit_Value>
 28c:	50 93 66 00 	sts	0x0066, r21	; 0x800066 <CounterRegisterInit_Value+0x1>
 290:	60 93 67 00 	sts	0x0067, r22	; 0x800067 <CounterRegisterInit_Value+0x2>
 294:	70 93 68 00 	sts	0x0068, r23	; 0x800068 <CounterRegisterInit_Value+0x3>
	
	TCNT0 = CounterRegisterInit_Value;
 298:	42 bf       	out	0x32, r20	; 50
	
	Number_OverFlows++;
 29a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Number_OverFlows>
 29e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <Number_OverFlows+0x1>
 2a2:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <Number_OverFlows+0x2>
 2a6:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <Number_OverFlows+0x3>
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	a1 1d       	adc	r26, r1
 2ae:	b1 1d       	adc	r27, r1
 2b0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Number_OverFlows>
 2b4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <Number_OverFlows+0x1>
 2b8:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <Number_OverFlows+0x2>
 2bc:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <Number_OverFlows+0x3>
	
	
}
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	08 95       	ret

000002c6 <Timer0_Start>:

void Timer0_Start(void)
{
	SET_BIT(TCCR0 , 0);
 2c6:	83 b7       	in	r24, 0x33	; 51
 2c8:	81 60       	ori	r24, 0x01	; 1
 2ca:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0 , 1);
 2cc:	83 b7       	in	r24, 0x33	; 51
 2ce:	82 60       	ori	r24, 0x02	; 2
 2d0:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0 , 2);
 2d2:	83 b7       	in	r24, 0x33	; 51
 2d4:	8b 7f       	andi	r24, 0xFB	; 251
 2d6:	83 bf       	out	0x33, r24	; 51
 2d8:	08 95       	ret

000002da <__muluhisi3>:
 2da:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__umulhisi3>
 2de:	a5 9f       	mul	r26, r21
 2e0:	90 0d       	add	r25, r0
 2e2:	b4 9f       	mul	r27, r20
 2e4:	90 0d       	add	r25, r0
 2e6:	a4 9f       	mul	r26, r20
 2e8:	80 0d       	add	r24, r0
 2ea:	91 1d       	adc	r25, r1
 2ec:	11 24       	eor	r1, r1
 2ee:	08 95       	ret

000002f0 <__umulhisi3>:
 2f0:	a2 9f       	mul	r26, r18
 2f2:	b0 01       	movw	r22, r0
 2f4:	b3 9f       	mul	r27, r19
 2f6:	c0 01       	movw	r24, r0
 2f8:	a3 9f       	mul	r26, r19
 2fa:	70 0d       	add	r23, r0
 2fc:	81 1d       	adc	r24, r1
 2fe:	11 24       	eor	r1, r1
 300:	91 1d       	adc	r25, r1
 302:	b2 9f       	mul	r27, r18
 304:	70 0d       	add	r23, r0
 306:	81 1d       	adc	r24, r1
 308:	11 24       	eor	r1, r1
 30a:	91 1d       	adc	r25, r1
 30c:	08 95       	ret

0000030e <_exit>:
 30e:	f8 94       	cli

00000310 <__stop_program>:
 310:	ff cf       	rjmp	.-2      	; 0x310 <__stop_program>
